{{ '//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css' | stylesheet_tag }}
{{ '//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js' | script_tag }}

<style>
.table>thead>tr>th, .table>tbody>tr>th, .table>tfoot>tr>th, .table>thead>tr>td, .table>tbody>tr>td, .table>tfoot>tr>td {
    vertical-align: middle;
    border-right:0;
    border-left: 0;
}
.table>thead>tr>th {border: 0}
.table>thead>tr>th>h1 {margin-bottom: 0}
.table>thead>tr>th.product-price {padding-left: 20px;}
h4#display-main-options-qty {margin-top: 0}
.table>thead>tr>th.caption {padding-top: 0}
#main-dish-table {border-top: none}
.display-qty {font-size: 16px}
.table>thead>tr>th.collection-qty {text-align: right; padding-right: 50px;}
.table-inputs {text-align: right;}
input[type="number"], select {display: inline;}
a {color: black}
.table-img { width: 80px }
.action-bar { margin: 15px 0; }
.action-bar.top { margin: 30px 0 0; }
.action-bar h1 { margin:0; padding: 0; line-height:1 }
.left { float: left; }
.right { float: right; }
.clearfix:before, .clearfix:after { content: ""; display: table; }
.clearfix:after { clear: both; }
.clearfix { zoom: 1; }
.quantity { text-align: center; width: 60px !important; margin: 0 !important; }

.modal-dialog {}
.thumbnail {margin-bottom:6px;}

.carousel-control.left,.carousel-control.right{
  background-image:none;
  margin-top:10%;
  width:5%;
}

.js-qty {float: right}

</style>



<!-- Modal -->
<div class="modal fade" id="modal-gallery" role="dialog">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
          <button class="close" type="button" data-dismiss="modal">Ã—</button>
          <h3 class="modal-title"></h3>
      </div>
      <div class="modal-body"></div>
      <div class="modal-footer">
          <button class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<!-- Modal End -->


<div class="container">
<!-- Package Options -->
{% assign productCollection = collections.package-options %}
{% if productCollection.products_count > 0 %}
  <table class="table">
    <thead>
      <tr>
        <th colspan="2"><h1>{{ productCollection.title }}</h1></th>
        {% if productCollection.handle == 'package-options' %}
          <th class="product-price">Price</th>
          <th class="collection-qty">Qty</th>
        {% endif %}
      </tr>
      {% if productCollection.handle == 'main-dish-options' or productCollection.handle == 'side-dish-options' %}
        <tr>
          <th colspan="4" class="display" id="display-{{ productCollection.handle }}-qty"></th>
        </tr>
      {% endif %}
    </thead>
    <tbody>
      {% for product in productCollection.products %}
        <tr>
          {% if product.featured_image %}
            <td class="table-img">
              <a href="#image{{ product.id }}">
                <img src="{{ product.featured_image.src | product_img_url: 'thumb' }}" id="image{{ product.id }}" alt="{{ product.featured_image.alt | escape }}" class="modal-img" data-collection="{{ productCollection.id }}"/>
              </a>
            </td>
          {% endif %}
          <td colspan="{% if product.featured_image and product.price > 0 %}1{% elsif product.price == 0 %}2{% else %}3{% endif %}">
            <a href="#image{{ product.id }}" class="modal-description" data-title="{{ product.title }}" data-description="{{ product.description | strip_html }}">
             {{ product.title }}
            </a>
          </td>
          {% if product.price > 0 %}
            <td>
              {{ product.price | money }}
            </td>
          {% endif %}
          <td class="table-inputs {{ productCollection.handle }}-qty" id="{{ product.title }}">
            <div class="js-qty">
              <button type="button" class="js-qty__adjust js-qty__adjust--minus" data-id="{{id}}" data-qty="{{itemMinus}}">&minus;</button>
              <input type="text" class="js-qty__num" value="{{itemQty}}" min="0" data-id="{{id}}" aria-label="quantity" pattern="[0-9]*" name="{{inputName}}" id="{{inputId}}" data-submit="{{submit}}">
              <button type="button" class="js-qty__adjust js-qty__adjust--plus" data-id="{{id}}" data-qty="{{itemAdd}}">+</button>
            </div>
          </td>
        </tr>
        <!-- Image Repo -->
        <div class="hidden" id="img-repo{{ productCollection.id }}" name="{{ product.id }}">
          {% for image in product.images %}
            <div class="item" id="image{{ product.id }}">
              <img class="center-block img-responsive" title="{{ product.title }}" src="{{ image.src | img_url: 'grande' }}" alt="{{ image.alt | escape }}">
            </div>
          {% endfor %}
        </div>
        <!-- Image Repo End -->
      {% endfor %}
    </tbody>
  </table>
{% else %}
  <p>There are no products in this view.</p>
{% endif %}
<!-- Package Options End -->



<!-- Main Dish Options -->
{% assign productCollection = collections.main-dish-options %}
{% if productCollection.products_count > 0 %}
  <table class="table">
    <thead>
      <tr>
        <th colspan="2"><h1>{{ productCollection.title }}</h1></th>
        {% if productCollection.handle == 'package-options' %}
          <th class="product-price">Price</th>
          <th class="collection-qty">Qty</th>
        {% endif %}
      </tr>
      {% if productCollection.handle == 'main-dish-options' or productCollection.handle == 'side-dish-options' %}
        <tr>
          <th colspan="4" class="display" id="display-{{ productCollection.handle }}-qty"></th>
        </tr>
      {% endif %}
    </thead>
    <tbody>
      {% for product in productCollection.products %}
        <tr>
          {% if product.featured_image %}
            <td class="table-img">
              <a href="#image{{ product.id }}">
                <img src="{{ product.featured_image.src | product_img_url: 'thumb' }}" id="image{{ product.id }}" alt="{{ product.featured_image.alt | escape }}" class="modal-img" data-collection="{{ productCollection.id }}"/>
              </a>
            </td>
          {% endif %}
          <td colspan="{% if product.featured_image and product.price > 0 %}1{% elsif product.price == 0 %}2{% else %}3{% endif %}">
            <a href="#image{{ product.id }}" class="modal-description" data-title="{{ product.title }}" data-description="{{ product.description | strip_html }}">
             {{ product.title }}
            </a>
          </td>
          {% if product.price > 0 %}
            <td>
              {{ product.price | money }}
            </td>
          {% endif %}
          <td class="table-inputs {{ productCollection.handle }}-qty" id="{{ product.title }}">
            <div class="js-qty">
              <button type="button" class="js-qty__adjust js-qty__adjust--minus" data-id="{{id}}" data-qty="{{itemMinus}}">&minus;</button>
              <input type="text" class="js-qty__num" value="{{itemQty}}" min="0" data-id="{{id}}" aria-label="quantity" pattern="[0-9]*" name="{{inputName}}" id="{{inputId}}" data-submit="{{submit}}">
              <button type="button" class="js-qty__adjust js-qty__adjust--plus" data-id="{{id}}" data-qty="{{itemAdd}}">+</button>
            </div>
          </td>
        </tr>
        <!-- Image Repo -->
        <div class="hidden" id="img-repo{{ productCollection.id }}" name="{{ product.id }}">
          {% for image in product.images %}
            <div class="item" id="image{{ product.id }}">
              <img class="center-block img-responsive" title="{{ product.title }}" src="{{ image.src | img_url: 'grande' }}" alt="{{ image.alt | escape }}">
            </div>
          {% endfor %}
        </div>
        <!-- Image Repo End -->
      {% endfor %}
    </tbody>
  </table>
{% else %}
  <p>There are no products in this view.</p>
{% endif %}
<!-- Main Dish Options End -->



<!-- Side Dish Options -->
{% assign productCollection = collections.side-dish-options %}
{% if productCollection.products_count > 0 %}
  <table class="table">
    <thead>
      <tr>
        <th colspan="2"><h1>{{ productCollection.title }}</h1></th>
        {% if productCollection.handle == 'package-options' %}
          <th class="product-price">Price</th>
          <th class="collection-qty">Qty</th>
        {% endif %}
      </tr>
      {% if productCollection.handle == 'main-dish-options' or productCollection.handle == 'side-dish-options' %}
        <tr>
          <th colspan="4" class="display" id="display-{{ productCollection.handle }}-qty"></th>
        </tr>
      {% endif %}
    </thead>
    <tbody>
      {% for product in productCollection.products %}
        <tr>
          {% if product.featured_image %}
            <td class="table-img">
              <a href="#image{{ product.id }}">
                <img src="{{ product.featured_image.src | product_img_url: 'thumb' }}" id="image{{ product.id }}" alt="{{ product.featured_image.alt | escape }}" class="modal-img" data-collection="{{ productCollection.id }}"/>
              </a>
            </td>
          {% endif %}
          <td colspan="{% if product.featured_image and product.price > 0 %}1{% elsif product.price == 0 %}2{% else %}3{% endif %}">
            <a href="#image{{ product.id }}" class="modal-description" data-title="{{ product.title }}" data-description="{{ product.description | strip_html }}">
             {{ product.title }}
            </a>
          </td>
          {% if product.price > 0 %}
            <td>
              {{ product.price | money }}
            </td>
          {% endif %}
          <td class="table-inputs {{ productCollection.handle }}-qty" id="{{ product.title }}">
            <div class="js-qty">
              <button type="button" class="js-qty__adjust js-qty__adjust--minus" data-id="{{id}}" data-qty="{{itemMinus}}">&minus;</button>
              <input type="text" class="js-qty__num" value="{{itemQty}}" min="0" data-id="{{id}}" aria-label="quantity" pattern="[0-9]*" name="{{inputName}}" id="{{inputId}}" data-submit="{{submit}}">
              <button type="button" class="js-qty__adjust js-qty__adjust--plus" data-id="{{id}}" data-qty="{{itemAdd}}">+</button>
            </div>
          </td>
        </tr>
        <!-- Image Repo -->
        <div class="hidden" id="img-repo{{ productCollection.id }}" name="{{ product.id }}">
          {% for image in product.images %}
            <div class="item" id="image{{ product.id }}">
              <img class="center-block img-responsive" title="{{ product.title }}" src="{{ image.src | img_url: 'grande' }}" alt="{{ image.alt | escape }}">
            </div>
          {% endfor %}
        </div>
        <!-- Image Repo End -->
      {% endfor %}
    </tbody>
  </table>
{% else %}
  <p>There are no products in this view.</p>
{% endif %}
<!-- Side Dish Options End -->



<!-- Add On Options -->
{% assign productCollection = collections.add-on-options %}
{% if productCollection.products_count > 0 %}
  <table class="table">
    <thead>
      <tr>
        <th colspan="2"><h1>{{ productCollection.title }}</h1></th>
        {% if productCollection.handle == 'package-options' %}
          <th class="product-price">Price</th>
          <th class="collection-qty">Qty</th>
        {% endif %}
      </tr>
      {% if productCollection.handle == 'main-dish-options' or productCollection.handle == 'side-dish-options' %}
        <tr>
          <th colspan="4" class="display" id="display-{{ productCollection.handle }}-qty"></th>
        </tr>
      {% endif %}
    </thead>
    <tbody>
      {% for product in productCollection.products %}
        <tr>
          {% if product.featured_image %}
            <td class="table-img">
              <a href="#image{{ product.id }}">
                <img src="{{ product.featured_image.src | product_img_url: 'thumb' }}" id="image{{ product.id }}" alt="{{ product.featured_image.alt | escape }}" class="modal-img" data-collection="{{ productCollection.id }}"/>
              </a>
            </td>
          {% endif %}
          <td colspan="{% if product.featured_image and product.price > 0 %}1{% elsif product.price == 0 %}2{% else %}3{% endif %}">
            <a href="#image{{ product.id }}" class="modal-description" data-title="{{ product.title }}" data-description="{{ product.description | strip_html }}">
             {{ product.title }}
            </a>
          </td>
          {% if product.price > 0 %}
            <td>
              {{ product.price | money }}
            </td>
          {% endif %}
          <td class="table-inputs">
            <input onfocus="this.select()" class="quantity field" id="{{ product.title }}" data-id="{{ variant.id }}" min="0" type="number" value="" tabindex="1"/>
          </td>
        </tr>
        <!-- Image Repo -->
        <div class="hidden" id="img-repo{{ productCollection.id }}" name="{{ product.id }}">
          {% for image in product.images %}
            <div class="item" id="image{{ product.id }}">
              <img class="center-block img-responsive" title="{{ product.title }}" src="{{ image.src | img_url: 'grande' }}" alt="{{ image.alt | escape }}">
            </div>
          {% endfor %}
        </div>
        <!-- Image Repo End -->
      {% endfor %}
    </tbody>
  </table>
{% else %}
  <p>There are no products in this view.</p>
{% endif %}
<!-- Add On Options End -->



<!-- Add to cart -->
<div class="action-bar clearfix">
  <input class="action-button submit button btn right add-to-cart-order-form" type="button" value="Add to the cart" disabled/>
</div>
<!-- Add to cart end -->
</div>


<script>
"use strict";
//  NodeList iteration not support by Chrome and Safari
NodeList.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];

let package8selections = 4;
let package16selections = 8;
let totalProductSelections;
let productCollection1remaining;
let productCollection2remaining;
let totalSelectionsRemaining;
let totalPackageQty;
let package1selections;
let package2selections;
let package1qty = 0;
let package2qty = 0;

// Disable product collection empty inputs if max
function disableInputs(inputsClass, collectionRemaining) {
  let collectionInputs = inputsClass;
  for (let input of collectionInputs) {
    if (collectionRemaining === 0 && input.children[0].children[1].value === "") {
      input.children[0].children[1].disabled = "true";
    }
    if (collectionRemaining === 0 && input.children[0].children[1].value !== "") {
      input.children[0].children[1].value = input.children[0].children[1].value;
    }
    if (collectionRemaining > 0) {
      input.children[0].children[1].removeAttribute('disabled');
    }
  }
}

// display selected dishes
function displaySelected(collectionRemaining, display, collectionSelected) {
  if (collectionRemaining > 0) {
    display.classList.remove("hidden");
    display.classList.add("show");
    if (display.id === 'display-main-dish-options-qty') {
      display.innerHTML = "Choose " + collectionRemaining + " (max " + 2 * totalPackageQty + " of each main dish)";
    } else {
      display.innerHTML = "Choose " + collectionRemaining;
    }
    display.style.color = 'black'
  } else if (collectionSelected > 0) {
    if (display.id === 'display-main-dish-options-qty') {
      display.innerHTML = "You've choosen " + collectionSelected + ", you're ready for your side dishes.";
    } else {
      display.innerHTML = "You've choosen " + collectionSelected + ", you're ready for any add on options.";
    }
    display.style.color = 'green'
  } else {
    display.classList.add("hidden");
    display.classList.remove("show");
    display.innerHTML = "";
    console.log('There are no ' + collectionSelected);
  }
}

// create event to set input max values
function addEvent(element, event, callback) {
  if (element.addEventListener) {
      element.addEventListener(event, callback, false);
  } else if (element.attachEvent) {
      element.attachEvent("on" + event, callback);
  } else {
      element["on" + event] = callback;
  }
}




window.onload = function () {

  function display() {
    // Get total package quantities
    let packageQuantities = document.querySelectorAll(".package-options-qty");
    for (let packageInput of packageQuantities) {
      let input = packageInput.children[0].children[1];
      if (packageInput.id === "16-Dish Package") {
        if (input.value === '') {
          package1qty = 0;
          package1selections = 0;
        } else {
          package1qty = parseInt(input.value, 10)
          package1selections = package1qty * package16selections;
        }
      }
      if (packageInput.id === "8-Dish Package") {
        if (input.value === '') {
          package2qty = 0;
          package2selections = 0;
        } else {
          package2qty = parseInt(input.value, 10)
          package2selections = package2qty * package8selections;
        }
      }
    }
    // Get total packages inputed
    totalPackageQty = package1qty + package2qty;
    // Get total product selection available
    totalProductSelections = package1selections + package2selections;

    // Find product collection 1 quantities
    let productCollection1inputs = document.querySelectorAll(".main-dish-options-qty");
    let productCollection1selected = 0;
    for (let tableInput of productCollection1inputs) {
      let input = tableInput.children[0].children[1];
      if (input.value !== '') {
        productCollection1selected += parseInt(input.value,10);
      }
    }

    // Find Product Collection2 Quantities
    let productCollection2inputs = document.querySelectorAll(".side-dish-options-qty");
    let productCollection2selected = 0;
    for (let tableInput of productCollection2inputs) {
      let input = tableInput.children[0].children[1];
      if (input.value !== '') {
        productCollection2selected += parseInt(input.value,10);
      }
    }

    // Display Selected for Product Collection1
    let displayProductCollection1selected = document.getElementById('display-main-dish-options-qty');
    productCollection1remaining = totalProductSelections - productCollection1selected;
    displaySelected(productCollection1remaining, displayProductCollection1selected, productCollection1selected);

    // Display Selected for Product Collection2
    let displayProductCollection2selected = document.getElementById('display-side-dish-options-qty');
    productCollection2remaining = totalProductSelections - productCollection2selected;
    displaySelected(productCollection2remaining, displayProductCollection2selected, productCollection2selected);

    // Enable add to cart button
    totalSelectionsRemaining = productCollection1remaining + productCollection2remaining;
    let addToCartBtn = document.querySelectorAll(".action-button");
    for (let btn of addToCartBtn) {
      if (totalSelectionsRemaining === 0 && totalPackageQty > 0) {
        btn.removeAttribute('disabled');
      } else {
        btn.setAttribute('disabled', 'disabled');
      }
    }
    // Disable product collection1 empty inputs if max
    disableInputs(productCollection1inputs, productCollection1remaining);
    disableInputs(productCollection2inputs, productCollection2remaining);



    // Set max for main dishes
    let productCollection1inputsMax = document.querySelectorAll(".main-dish-options-qty");
    for (let tableInput of productCollection1inputsMax) {
      let input = tableInput.children[0].children[1];
      input.setAttribute('lastvalue', input.value);
      addEvent(input, "keyup", function () {
        let maxVal;
        if (productCollection1remaining > 0) {
          maxVal = 2 * totalPackageQty;
        } else {
          maxVal = input.getAttribute('lastvalue');
        }
        let thisVal = this.value;
        if (thisVal > maxVal) {
          this.value = maxVal;
        }
      });
    }
    let productCollection1buttons = document.querySelectorAll(".js-qty__adjust");
    for (let button of productCollection1buttons) {
      if (button.parentNode.parentNode.classList.contains("main-dish-options-qty")) {
        let input = button.parentNode.children[1];
        input.setAttribute('lastvalue', input.value);
        addEvent(button, "click", function () {
          console.log('You clicked a button');
          let maxVal;
          if (productCollection1remaining > 0) {
            maxVal = 2 * totalPackageQty;
          } else {
            maxVal = input.getAttribute('lastvalue');
          }
          let thisVal = this.parentNode.children[1].value;
          console.log(thisVal);
          if (thisVal > maxVal) {
            this.parentNode.children[1].value = maxVal;
          }
        });
      }
    }

    // Set max for side dishes
    let productCollection2inputsMax = document.querySelectorAll(".side-dish-options-qty");
    for (let tableInput of productCollection2inputsMax) {
      let input = tableInput.children[0].children[1];
      input.setAttribute('lastvalue', input.value);
      addEvent(input, "keyup", function () {
        let maxVal;
        if (productCollection2remaining > 0) {
          maxVal = totalProductSelections;
        } else {
          maxVal = input.getAttribute('lastvalue');
        }
        let thisVal = this.value;
        if (thisVal > maxVal) {
          this.value = maxVal;
        }
      });
    }
    let productCollection2buttons = document.querySelectorAll(".js-qty__adjust");
    for (let button of productCollection2buttons) {
      if (button.parentNode.parentNode.classList.contains("side-dish-options-qty")) {
        let input = button.parentNode.children[1];
        input.setAttribute('lastvalue', input.value);
        addEvent(button, "click", function () {
          console.log('You clicked a button');
          let maxVal;
          if (productCollection2remaining > 0) {
            maxVal = totalProductSelections;
          } else {
            maxVal = input.getAttribute('lastvalue');
          }
          let thisVal = this.parentNode.children[1].value;
          console.log(thisVal);
          if (thisVal > maxVal) {
            this.parentNode.children[1].value = maxVal;
          }
        });
      }
    }
  }
  display();

  // On change functions
  function onChange() {
    let tableInput = this.parentNode.parentNode;
    let input = this.parentNode.children[1];
    let qty = parseInt(input.value.replace(/\D/g, ''));

    // Disable product collection empty inputs if max
    let productCollection1inputs = document.querySelectorAll(".main-dish-options-qty");
    let productCollection2inputs = document.querySelectorAll(".side-dish-options-qty");
    disableInputs(productCollection1inputs, productCollection1remaining);
    disableInputs(productCollection2inputs, productCollection2remaining);

    // Clear inputs if package quantity is reduced
    if (tableInput.classList.contains("package-options-qty")) {
      if (input.getAttribute('lastvalue') === input.value) {
        input.setAttribute('lastvalue', input.value);
      } else {
        console.log(input.value < input.getAttribute('lastvalue') ? 'decrement' : 'increment');
        if (input.value < input.getAttribute('lastvalue')) {
          let productCollection1and2inputs = document.querySelectorAll(".table-inputs");
          for (let input of productCollection1and2inputs) {
            if (input.classList.contains('main-dish-options-qty') || input.classList.contains('side-dish-options-qty')) {
              input.children[0].children[1].value = '';
              input.removeAttribute('disabled');
            }
          }
        }
        if (input.value === '') {
          input.setAttribute('lastvalue', 0);
        } else {
          input.setAttribute('lastvalue', input.value);
        }
      }
    }
    display();
  }

  // Listen for click on inputs
  let inputButtons = document.querySelectorAll('.js-qty__adjust');
  for (let i = 0; i < inputButtons.length; i++) {
    inputButtons[i].addEventListener('click', onChange, false);
  }
}







</script>



<!-- Modal Carousel Script -->
<script>
/* activate the carousel */
$("#modal-carousel").carousel({interval:false});

/* change modal title when slide changes */
$("#modal-carousel").on("slid.bs.carousel", function () {
  $(".modal-title").html($(this).find(".active img").attr("title"));
});

/* click an image */
$(".modal-img").click(function() {
  var collection = this.dataset.collection;
  var top_level_div = document.getElementById('img-repo' + collection);
  var count = top_level_div.getElementsByTagName('div').length;
  var body = $(".modal-body");
  var title = $(".modal-title");
  body.empty();
  title.empty();
  var addCarousel = '';
  if (count > 1) {
    addCarousel = $('<div id="modal-carousel" class="carousel">' +
                      '<div class="carousel-inner"></div>' +
                        '<a class="carousel-control left" href="#modal-carousel" data-slide="prev">' +
                          '<i class="glyphicon glyphicon-chevron-left"></i>' +
                        '</a>' +
                        '<a class="carousel-control right" href="#modal-carousel" data-slide="next">' +
                          '<i class="glyphicon glyphicon-chevron-right"></i>' +
                        '</a>' +
                      '</div>');
  } else {
    addCarousel = $('<div id="modal-carousel" class="carousel">' +
                      '<div class="carousel-inner"></div>' +
                      '</div>');
  }
  body.append(addCarousel);
  var content = $(".carousel-inner");
  var id = this.id;
  var repo = $("#img-repo" + collection + " .item");
  var repoCopy = repo.filter("#" + id).clone();
  var active = repoCopy.first();
  active.addClass("active");
  title.html(active.find("img").attr("title"));
  content.append(repoCopy);
  $("#modal-gallery").modal("show");
});

/* Click a product title */
$(".modal-description").click(function(){
    $(".modal-title").empty;
    $(".modal-body").empty;
    var title = $(this).data('title');
    var description = $(this).data('description');
    $(".modal-title").html(title);
    $(".modal-body").html(description);
    $("#modal-gallery").modal("show");
});
</script>



<script>
Shopify.itemsToAdd = [];
Shopify.addItemstoTheCart = function() {
  if (Shopify.itemsToAdd.length) {
    var item = Shopify.itemsToAdd.pop();
    $.ajax({
      url: '/cart/add',
      dataType: 'json',
      type: 'post',
      data: item,
      success: Shopify.addItemstoTheCart,
      error: Shopify.addItemstoTheCart
    });
  } else {
    window.location.href = '/cart';
  }
}

jQuery(function($) {
  $('table .quantity:first').focus();
  $('[max]').change(function() {
    var max = parseInt($(this).attr('max'), 10);
    var value = parseInt($(this).val(), 10) || 0;
    if (value > max) {
      alert('We only have ' + max + ' of this item in stock');
      $(this).val(max);
    }
  });
  $('.add-to-cart-order-form').click(function() {
    // Resetting.
    Shopify.itemsToAdd = [];
    $('.quantity').each(function() {
      var quantity = parseInt($(this).val(), 10);
      if (quantity) {
        Shopify.itemsToAdd.push( { id: $(this).attr('data-id'), quantity: quantity } );
      }
    });
    if (Shopify.itemsToAdd.length) {
      Shopify.addItemstoTheCart();
    }
    else {
      alert('All quantities are set to zero.');
      $('.add-to-cart-order-form').removeAttr('disabled').removeClass('disabled');
    }
  });
});
</script>
